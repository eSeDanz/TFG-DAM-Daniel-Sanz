/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package vista;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.math.BigInteger;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.util.EventObject;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import modelo.ArticuloControl;
import javax.swing.table.TableRowSorter;
import javax.swing.JFileChooser;
import javax.swing.JTextField;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;
import modelo.ProveedorControl;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author Daniel Sanz Ferrer
 */
public class VistaArticulo extends javax.swing.JInternalFrame {

    private final ArticuloControl AC = new ArticuloControl();
    private final ProveedorControl PROC = new ProveedorControl();
    private final DecimalFormatSymbols SYMBOLS;
    private final DecimalFormat DF;
    private String referencia, referenciaAntigua, descripcion, proveedor;
    private int minimo;
    private BigInteger codigoEAN;
    private double precio;

    /**
     * Creates new form FrmCategoria
     */
    public VistaArticulo() {
        initComponents();
        jTabbedPaneArticulos.setEnabledAt(1, false);
        mostrarPaginas();
        listar();
        jComboBoxProveedor.setModel(PROC.seleccionar());
        SYMBOLS = new DecimalFormatSymbols();
        SYMBOLS.setDecimalSeparator('.');
        DF = new DecimalFormat("#.##", SYMBOLS);
        UIManager.put("FileChooser.cancelButtonText", "Cancelar");
        UIManager.put("FileChooser.cancelButtonToolTipText", "Cancelar la acción.");
        UIManager.put("OptionPane.yesButtonText", "Si");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPaneArticulos = new javax.swing.JTabbedPane();
        jPanelListado = new javax.swing.JPanel();
        jLabelDescripcion = new javax.swing.JLabel();
        jButtonBuscar = new javax.swing.JButton();
        jButtonNuevo = new javax.swing.JButton();
        jButtonEditar = new javax.swing.JButton();
        jScrollPaneArticulos = new javax.swing.JScrollPane();
        jTableArticulos = new javax.swing.JTable();
        jLabelCantidad = new javax.swing.JLabel();
        jLabelNumPag = new javax.swing.JLabel();
        jComboBoxPagina = new javax.swing.JComboBox<>();
        jLabelTotalRegXPag = new javax.swing.JLabel();
        jComboBoxRegistrosPagina = new javax.swing.JComboBox<>();
        jLabelCarga = new javax.swing.JLabel();
        jLabelActualizacionPro = new javax.swing.JLabel();
        jLabelCambioPrecio = new javax.swing.JLabel();
        jButtonCargar = new javax.swing.JButton();
        jButtonActualizacionIbili = new javax.swing.JButton();
        jButtonActualizacionLifestyle = new javax.swing.JButton();
        jButtonActualizacionMetaltex = new javax.swing.JButton();
        jLabelActualizacionGeneral = new javax.swing.JLabel();
        jButtonActualizacionGeneral = new javax.swing.JButton();
        jComboBoxProveedor = new javax.swing.JComboBox<>();
        jLabelPorcentaje = new javax.swing.JLabel();
        jTextFieldPorcentaje = new javax.swing.JTextField();
        jLabelSimboloPorcentaje = new javax.swing.JLabel();
        jButtonAplicarCambioPrecios = new javax.swing.JButton();
        jButtonEliminar = new javax.swing.JButton();
        jTextFieldDescripcionBuscar = new javax.swing.JTextField();
        jButtonRevertir = new javax.swing.JButton();
        jLabelPrecio = new javax.swing.JLabel();
        jTextFieldPrecio = new javax.swing.JTextField();
        jLabelAnterior = new javax.swing.JLabel();
        jTextFieldAnterior = new javax.swing.JTextField();
        jButtonCalcular = new javax.swing.JButton();
        jPanelMantenimiento = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButtonGuardar = new javax.swing.JButton();
        jButtonVolver = new javax.swing.JButton();
        jLabelReferencia = new javax.swing.JLabel();
        jComboBoxProveedorMantenimiento = new javax.swing.JComboBox<>();
        jLabelCodigo = new javax.swing.JLabel();
        jTextFieldCodigoMantenimiento = new javax.swing.JTextField();
        jLabelMinimo = new javax.swing.JLabel();
        jLabelPrecioMantenimiento = new javax.swing.JLabel();
        jLabelProveedor = new javax.swing.JLabel();
        jScrollPaneDescripcion = new javax.swing.JScrollPane();
        jTextAreaDescripcionMantenimiento = new javax.swing.JTextArea();
        jTextFieldMinimoMantenimiento = new javax.swing.JTextField();
        jTextFieldPrecioMantenimiento = new javax.swing.JTextField();
        jTextFieldReferenciaMantenimiento = new javax.swing.JTextField();
        jButtonRecuperarPrecio = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Articulos");

        jLabelDescripcion.setText("Descripción:");

        jButtonBuscar.setText("Buscar");
        jButtonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBuscarActionPerformed(evt);
            }
        });

        jButtonNuevo.setText("Nuevo");
        jButtonNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNuevoActionPerformed(evt);
            }
        });

        jButtonEditar.setText("Editar");
        jButtonEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditarActionPerformed(evt);
            }
        });

        jTableArticulos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Referencia", "Código EAN", "Descripción", "Pedido Mínimo", "Precio", "Proveedor"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Double.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPaneArticulos.setViewportView(jTableArticulos);

        jLabelNumPag.setText("# Página");

        jComboBoxPagina.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxPaginaActionPerformed(evt);
            }
        });

        jLabelTotalRegXPag.setText("Total de artículos por página");

        jComboBoxRegistrosPagina.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "10", "25", "50", "100", "250" }));
        jComboBoxRegistrosPagina.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxRegistrosPaginaActionPerformed(evt);
            }
        });

        jLabelCarga.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabelCarga.setText("Carga inicial de artículos desde archivo .xlsx");

        jLabelActualizacionPro.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabelActualizacionPro.setText("Actualización de precios desde archivo .xlsx");

        jLabelCambioPrecio.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabelCambioPrecio.setText("Cambio de precios por proveedor y porcentaje");

        jButtonCargar.setText("Cargar Artículos");
        jButtonCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCargarActionPerformed(evt);
            }
        });

        jButtonActualizacionIbili.setText("IBILI");
        jButtonActualizacionIbili.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonActualizacionIbiliActionPerformed(evt);
            }
        });

        jButtonActualizacionLifestyle.setText("LIFESTYLE");
        jButtonActualizacionLifestyle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonActualizacionLifestyleActionPerformed(evt);
            }
        });

        jButtonActualizacionMetaltex.setText("METALTEX");
        jButtonActualizacionMetaltex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonActualizacionMetaltexActionPerformed(evt);
            }
        });

        jLabelActualizacionGeneral.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabelActualizacionGeneral.setText("Actualización de precios desde archivo .xlsx");

        jButtonActualizacionGeneral.setText("Actualizar Precios");
        jButtonActualizacionGeneral.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonActualizacionGeneralActionPerformed(evt);
            }
        });

        jComboBoxProveedor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ibili", "Lifestyle", "Metaltex" }));

        jLabelPorcentaje.setText("Porcentaje del cambio de precio:");

        jTextFieldPorcentaje.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jLabelSimboloPorcentaje.setText("%");

        jButtonAplicarCambioPrecios.setText("Aplicar cambios de precio");
        jButtonAplicarCambioPrecios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAplicarCambioPreciosActionPerformed(evt);
            }
        });

        jButtonEliminar.setText("Eliminar");
        jButtonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEliminarActionPerformed(evt);
            }
        });

        jButtonRevertir.setText("Revertir cambios de precio");
        jButtonRevertir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRevertirActionPerformed(evt);
            }
        });

        jLabelPrecio.setText("Precio:");

        jLabelAnterior.setText("Anterior:");

        jButtonCalcular.setText("Calcular");
        jButtonCalcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCalcularActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelListadoLayout = new javax.swing.GroupLayout(jPanelListado);
        jPanelListado.setLayout(jPanelListadoLayout);
        jPanelListadoLayout.setHorizontalGroup(
            jPanelListadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelListadoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelListadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelListadoLayout.createSequentialGroup()
                        .addGroup(jPanelListadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPaneArticulos)
                            .addGroup(jPanelListadoLayout.createSequentialGroup()
                                .addComponent(jLabelDescripcion)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextFieldDescripcionBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonBuscar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonNuevo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonEditar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonEliminar)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanelListadoLayout.createSequentialGroup()
                                .addComponent(jLabelNumPag)
                                .addGap(18, 18, 18)
                                .addComponent(jComboBoxPagina, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(164, 164, 164)
                                .addComponent(jLabelTotalRegXPag)
                                .addGap(18, 18, 18)
                                .addComponent(jComboBoxRegistrosPagina, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabelCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelListadoLayout.createSequentialGroup()
                        .addGroup(jPanelListadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jButtonCargar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelCarga, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelActualizacionGeneral, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonActualizacionGeneral, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(57, 57, 57)
                        .addGroup(jPanelListadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButtonActualizacionMetaltex, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonActualizacionLifestyle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelActualizacionPro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonActualizacionIbili, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE)
                        .addGroup(jPanelListadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelListadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jButtonRevertir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabelCambioPrecio, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
                                .addGroup(jPanelListadoLayout.createSequentialGroup()
                                    .addComponent(jLabelPorcentaje)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jTextFieldPorcentaje, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabelSimboloPorcentaje))
                                .addComponent(jComboBoxProveedor, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonAplicarCambioPrecios, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanelListadoLayout.createSequentialGroup()
                                .addComponent(jLabelPrecio)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabelAnterior)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldAnterior, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonCalcular)))
                        .addGap(17, 17, 17))))
        );
        jPanelListadoLayout.setVerticalGroup(
            jPanelListadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelListadoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelListadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanelListadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelDescripcion)
                        .addComponent(jButtonBuscar)
                        .addComponent(jButtonNuevo)
                        .addComponent(jButtonEditar)
                        .addComponent(jButtonEliminar))
                    .addComponent(jTextFieldDescripcionBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPaneArticulos, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanelListadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelListadoLayout.createSequentialGroup()
                        .addGroup(jPanelListadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelNumPag)
                            .addComponent(jComboBoxPagina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelTotalRegXPag)
                            .addComponent(jComboBoxRegistrosPagina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelListadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelListadoLayout.createSequentialGroup()
                                .addComponent(jLabelCarga)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonCargar)
                                .addGap(18, 18, 18)
                                .addComponent(jLabelActualizacionGeneral)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonActualizacionGeneral))
                            .addGroup(jPanelListadoLayout.createSequentialGroup()
                                .addGroup(jPanelListadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanelListadoLayout.createSequentialGroup()
                                        .addComponent(jLabelActualizacionPro)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButtonActualizacionIbili)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanelListadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jButtonActualizacionLifestyle)
                                            .addComponent(jLabelPrecio)
                                            .addComponent(jTextFieldPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabelAnterior)
                                            .addComponent(jTextFieldAnterior, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jButtonCalcular)))
                                    .addGroup(jPanelListadoLayout.createSequentialGroup()
                                        .addComponent(jLabelCambioPrecio)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jComboBoxProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanelListadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanelListadoLayout.createSequentialGroup()
                                        .addGroup(jPanelListadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabelPorcentaje)
                                            .addComponent(jTextFieldPorcentaje, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabelSimboloPorcentaje))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButtonAplicarCambioPrecios)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButtonRevertir))
                                    .addComponent(jButtonActualizacionMetaltex)))))
                    .addComponent(jLabelCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        jTabbedPaneArticulos.addTab("Listado", jPanelListado);

        jPanelMantenimiento.setEnabled(false);
        jPanelMantenimiento.setFocusable(false);
        jPanelMantenimiento.setRequestFocusEnabled(false);

        jLabel2.setText("Descripción (*)");

        jLabel4.setText("(*) Indica que es un campo obligatorio.");

        jButtonGuardar.setText("Guardar");
        jButtonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGuardarActionPerformed(evt);
            }
        });

        jButtonVolver.setText("Volver");
        jButtonVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVolverActionPerformed(evt);
            }
        });

        jLabelReferencia.setText("Referencia (*)");

        jLabelCodigo.setText("Código EAN");

        jLabelMinimo.setText("Pedido Mínimo (*)");

        jLabelPrecioMantenimiento.setText("Precio (*)");

        jLabelProveedor.setText("Proveedor (*)");

        jTextAreaDescripcionMantenimiento.setColumns(20);
        jTextAreaDescripcionMantenimiento.setRows(5);
        jScrollPaneDescripcion.setViewportView(jTextAreaDescripcionMantenimiento);

        jButtonRecuperarPrecio.setText("Recuperar precio anterior");
        jButtonRecuperarPrecio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRecuperarPrecioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelMantenimientoLayout = new javax.swing.GroupLayout(jPanelMantenimiento);
        jPanelMantenimiento.setLayout(jPanelMantenimientoLayout);
        jPanelMantenimientoLayout.setHorizontalGroup(
            jPanelMantenimientoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMantenimientoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelMantenimientoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelReferencia)
                    .addComponent(jLabelCodigo)
                    .addComponent(jLabelMinimo)
                    .addComponent(jLabel2)
                    .addComponent(jLabelPrecioMantenimiento)
                    .addComponent(jLabelProveedor))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addGroup(jPanelMantenimientoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jComboBoxProveedorMantenimiento, 0, 263, Short.MAX_VALUE)
                    .addComponent(jTextFieldPrecioMantenimiento, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldCodigoMantenimiento)
                    .addComponent(jScrollPaneDescripcion, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                    .addComponent(jTextFieldReferenciaMantenimiento, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldMinimoMantenimiento))
                .addGap(18, 18, 18)
                .addComponent(jButtonRecuperarPrecio)
                .addGap(374, 374, 374))
            .addGroup(jPanelMantenimientoLayout.createSequentialGroup()
                .addGroup(jPanelMantenimientoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelMantenimientoLayout.createSequentialGroup()
                        .addGap(192, 192, 192)
                        .addComponent(jButtonGuardar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonVolver))
                    .addGroup(jPanelMantenimientoLayout.createSequentialGroup()
                        .addGap(166, 166, 166)
                        .addComponent(jLabel4)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelMantenimientoLayout.setVerticalGroup(
            jPanelMantenimientoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMantenimientoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelMantenimientoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelReferencia)
                    .addComponent(jTextFieldReferenciaMantenimiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelMantenimientoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldCodigoMantenimiento, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelCodigo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelMantenimientoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPaneDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelMantenimientoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldMinimoMantenimiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelMinimo))
                .addGap(18, 18, 18)
                .addGroup(jPanelMantenimientoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelPrecioMantenimiento)
                    .addComponent(jTextFieldPrecioMantenimiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonRecuperarPrecio))
                .addGap(18, 18, 18)
                .addGroup(jPanelMantenimientoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelProveedor)
                    .addComponent(jComboBoxProveedorMantenimiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addGroup(jPanelMantenimientoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonGuardar)
                    .addComponent(jButtonVolver))
                .addContainerGap(237, Short.MAX_VALUE))
        );

        jTabbedPaneArticulos.addTab("Mantenimiento", jPanelMantenimiento);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPaneArticulos)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPaneArticulos)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBuscarActionPerformed
        String nombre = jTextFieldDescripcionBuscar.getText();
        int regPag = Integer.valueOf(jComboBoxRegistrosPagina.getItemAt(jComboBoxRegistrosPagina.getSelectedIndex()));
        int total = AC.total();
        jTableArticulos.setModel(AC.listar(nombre, regPag, 1));
        TableRowSorter orden = new TableRowSorter(jTableArticulos.getModel());
        jTableArticulos.setRowSorter(orden);
        int mostrados = AC.totalMostrados();
        jLabelCantidad.setText("Mostrando " + mostrados + " de un total de " + total + " artículos");
        jTextFieldDescripcionBuscar.setText("");
    }//GEN-LAST:event_jButtonBuscarActionPerformed

    private void jButtonNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNuevoActionPerformed
        vaciarCampos();
        jButtonGuardar.setEnabled(true);
        jButtonGuardar.setText("Guardar");
        jButtonRecuperarPrecio.setEnabled(false);
        jTabbedPaneArticulos.setSelectedIndex(1);
        jTabbedPaneArticulos.setEnabledAt(0, false);
        jTabbedPaneArticulos.setEnabledAt(1, true);
    }//GEN-LAST:event_jButtonNuevoActionPerformed

    private void jButtonEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditarActionPerformed
        if (jTableArticulos.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(null, "Seleccione el artículo a editar.", "Artículos", JOptionPane.INFORMATION_MESSAGE);
        } else {
            jButtonGuardar.setEnabled(true);
            jButtonGuardar.setText("Editar");
            int filaSeleccionada = jTableArticulos.getSelectedRow();
            Object ref = jTableArticulos.getValueAt(filaSeleccionada, 0);
            Object cod = jTableArticulos.getValueAt(filaSeleccionada, 1);
            Object desc = jTableArticulos.getValueAt(filaSeleccionada, 2);
            Object min = jTableArticulos.getValueAt(filaSeleccionada, 3);
            Object prec = jTableArticulos.getValueAt(filaSeleccionada, 4);
            Object pro = jTableArticulos.getValueAt(filaSeleccionada, 5);
            this.referenciaAntigua = String.valueOf(ref);
            this.codigoEAN = new BigInteger(cod.toString());
            this.descripcion = String.valueOf(desc);
            this.minimo = Integer.valueOf(min.toString());
            this.precio = Double.valueOf(prec.toString());
            this.proveedor = String.valueOf(pro);
            jTextFieldReferenciaMantenimiento.setText(referenciaAntigua);
            jTextFieldCodigoMantenimiento.setText(String.valueOf(codigoEAN));
            jTextAreaDescripcionMantenimiento.setText(descripcion);
            jTextFieldMinimoMantenimiento.setText(String.valueOf(minimo));
            jTextFieldPrecioMantenimiento.setText(String.valueOf(precio));
            jComboBoxProveedorMantenimiento.setModel(PROC.seleccionar());
            for (int i = 0; i < jComboBoxProveedorMantenimiento.getItemCount(); i++) {
                jComboBoxProveedorMantenimiento.setSelectedIndex(i);
                if (jComboBoxProveedorMantenimiento.getSelectedItem().toString().equals(proveedor)) {
                    break;
                }
            }
            jButtonRecuperarPrecio.setEnabled(true);
            jTabbedPaneArticulos.setSelectedIndex(1);
            jTabbedPaneArticulos.setEnabledAt(0, false);
            jTabbedPaneArticulos.setEnabledAt(1, true);
        }
    }//GEN-LAST:event_jButtonEditarActionPerformed

    private void jComboBoxPaginaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxPaginaActionPerformed
        int regPag = Integer.valueOf(jComboBoxRegistrosPagina.getItemAt(jComboBoxRegistrosPagina.getSelectedIndex()));
        int pag = Integer.valueOf(jComboBoxPagina.getItemAt(jComboBoxPagina.getSelectedIndex()));
        int total = AC.total();
        jTableArticulos.setModel(AC.listar("", regPag, pag));
        TableRowSorter orden = new TableRowSorter(jTableArticulos.getModel());
        jTableArticulos.setRowSorter(orden);
        int mostrados = AC.totalMostrados();
        jLabelCantidad.setText("Mostrando " + mostrados + " de un total de " + total + " artículos");
    }//GEN-LAST:event_jComboBoxPaginaActionPerformed

    private void jComboBoxRegistrosPaginaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxRegistrosPaginaActionPerformed
        jComboBoxPagina.setModel(new DefaultComboBoxModel<>());
        int regPag = Integer.valueOf(jComboBoxRegistrosPagina.getItemAt(jComboBoxRegistrosPagina.getSelectedIndex()));
        int total = AC.total();
        mostrarPaginas();
        jTableArticulos.setModel(AC.listar("", regPag, 1));
        TableRowSorter orden = new TableRowSorter(jTableArticulos.getModel());
        jTableArticulos.setRowSorter(orden);
        int mostrados = AC.totalMostrados();
        jLabelCantidad.setText("Mostrando " + mostrados + " de un total de " + total + " artículos");
    }//GEN-LAST:event_jComboBoxRegistrosPaginaActionPerformed

    private void jButtonVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVolverActionPerformed
        jTabbedPaneArticulos.setSelectedIndex(0);
        jTabbedPaneArticulos.setEnabledAt(0, true);
        jTabbedPaneArticulos.setEnabledAt(1, false);
        jTextFieldDescripcionBuscar.setText("");
        jTextFieldPrecio.setText("");
        jTextFieldAnterior.setText("");
        jTextFieldPorcentaje.setText("");
        listar();
    }//GEN-LAST:event_jButtonVolverActionPerformed

    private void jButtonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGuardarActionPerformed
        if (jButtonGuardar.getText().equals("Guardar")) {
            if (jTextFieldReferenciaMantenimiento.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Debes introducir una referencia para el artículo.", "Artículos", JOptionPane.WARNING_MESSAGE);
            } else if (!jTextFieldCodigoMantenimiento.getText().equals("")) {
                if (!jTextFieldCodigoMantenimiento.getText().matches("^\\d+$")) {
                    JOptionPane.showMessageDialog(null, "El código EAN tiene que ser un número entero positivo.", "Artículos", JOptionPane.WARNING_MESSAGE);
                } else if (jTextAreaDescripcionMantenimiento.getText().equals("")) {
                    JOptionPane.showMessageDialog(null, "Debes introducir una descripción para el artículo.", "Artículos", JOptionPane.WARNING_MESSAGE);
                } else if (jTextFieldMinimoMantenimiento.getText().equals("") || !jTextFieldMinimoMantenimiento.getText().matches("^\\d+$")) {
                    JOptionPane.showMessageDialog(null, "Debes introducir una cantidad válida para el pedido mínimo de un artículo.", "Artículos", JOptionPane.WARNING_MESSAGE);
                } else if (jTextFieldPrecioMantenimiento.getText().equals("") || !jTextFieldPrecioMantenimiento.getText().matches("^[0-9]+([.][0-9]{1,2})?$")) {
                    JOptionPane.showMessageDialog(null, "Debes introducir un precio válido para el artículo.", "Artículos", JOptionPane.WARNING_MESSAGE);
                } else {
                    asignarValores();
                    String resultado = AC.insertar(referencia, codigoEAN, descripcion, minimo, precio, proveedor);
                    if (resultado.equals("OK")) {
                        JOptionPane.showMessageDialog(null, "Artículo insertado correctamente.", "Artículos", JOptionPane.INFORMATION_MESSAGE);
                        vaciarCampos();
                    } else {
                        JOptionPane.showMessageDialog(null, resultado, "Artículos", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } else if (jTextAreaDescripcionMantenimiento.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Debes introducir una descripción para el artículo.", "Artículos", JOptionPane.WARNING_MESSAGE);
            } else if (jTextFieldMinimoMantenimiento.getText().equals("") || !jTextFieldMinimoMantenimiento.getText().matches("^\\d+$")) {
                JOptionPane.showMessageDialog(null, "Debes introducir una cantidad válida para el pedido mínimo de un artículo.", "Artículos", JOptionPane.WARNING_MESSAGE);
            } else if (jTextFieldPrecioMantenimiento.getText().equals("") || !jTextFieldPrecioMantenimiento.getText().matches("^[0-9]+([.][0-9]{1,2})?$")) {
                JOptionPane.showMessageDialog(null, "Debes introducir un precio válido para el artículo.", "Artículos", JOptionPane.WARNING_MESSAGE);
            } else {
                jTextFieldCodigoMantenimiento.setText("0");
                asignarValores();
                String resultado = AC.insertar(referencia, codigoEAN, descripcion, minimo, precio, proveedor);
                if (resultado.equals("OK")) {
                    JOptionPane.showMessageDialog(null, "Artículo insertado correctamente.", "Artículos", JOptionPane.INFORMATION_MESSAGE);
                    vaciarCampos();
                } else {
                    JOptionPane.showMessageDialog(null, resultado, "Artículos", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            if (jTextFieldReferenciaMantenimiento.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Debes introducir una referencia para el artículo.", "Artículos", JOptionPane.WARNING_MESSAGE);
            } else if (!jTextFieldCodigoMantenimiento.getText().equals("")) {
                if (!jTextFieldCodigoMantenimiento.getText().matches("^\\d+$")) {
                    JOptionPane.showMessageDialog(null, "El código EAN debe ser un número entero positivo.", "Artículos", JOptionPane.WARNING_MESSAGE);
                } else if (jTextAreaDescripcionMantenimiento.getText().equals("")) {
                    JOptionPane.showMessageDialog(null, "Debes introducir una descripción para el artículo.", "Artículos", JOptionPane.WARNING_MESSAGE);
                } else if (jTextFieldMinimoMantenimiento.getText().equals("") || !jTextFieldMinimoMantenimiento.getText().matches("^\\d+$")) {
                    JOptionPane.showMessageDialog(null, "Debes introducir una cantidad válida para el pedido mínimo de un artículo.", "Artículos", JOptionPane.WARNING_MESSAGE);
                } else if (jTextFieldPrecioMantenimiento.getText().equals("") || !jTextFieldPrecioMantenimiento.getText().matches("^[0-9]+([.][0-9]{1,2})?$")) {
                    JOptionPane.showMessageDialog(null, "Debes introducir un precio válido para el artículo.", "Artículos", JOptionPane.WARNING_MESSAGE);
                } else {
                    asignarValores();
                    String resultado = AC.actualizar(referencia, referenciaAntigua, codigoEAN, descripcion, minimo, precio, proveedor);
                    if (resultado.equals("OK")) {
                        JOptionPane.showMessageDialog(null, "Artículo actualizado correctamente.", "Artículos", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(null, resultado, "Artículos", JOptionPane.ERROR_MESSAGE);
                    }
                    jTabbedPaneArticulos.setSelectedIndex(0);
                    jTabbedPaneArticulos.setEnabledAt(0, true);
                    jTabbedPaneArticulos.setEnabledAt(1, false);
                    listar();
                }
            } else if (jTextAreaDescripcionMantenimiento.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Debes introducir una descripción para el artículo.", "Artículos", JOptionPane.WARNING_MESSAGE);
            } else if (jTextFieldMinimoMantenimiento.getText().equals("") || !jTextFieldMinimoMantenimiento.getText().matches("^\\d+$")) {
                JOptionPane.showMessageDialog(null, "Debes introducir una cantidad válida para el pedido mínimo de un artículo.", "Artículos", JOptionPane.WARNING_MESSAGE);
            } else if (jTextFieldPrecioMantenimiento.getText().equals("") || !jTextFieldPrecioMantenimiento.getText().matches("^[0-9]+([.][0-9]{1,2})?$")) {
                JOptionPane.showMessageDialog(null, "Debes introducir un precio válido para el artículo.", "Artículos", JOptionPane.WARNING_MESSAGE);
            } else {
                jTextFieldCodigoMantenimiento.setText("0");
                asignarValores();
                String resultado = AC.actualizar(referencia, referenciaAntigua, codigoEAN, descripcion, minimo, precio, proveedor);
                if (resultado.equals("OK")) {
                    JOptionPane.showMessageDialog(null, "Artículo actualizado correctamente.", "Artículos", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, resultado, "Artículos", JOptionPane.ERROR_MESSAGE);
                }
                jTabbedPaneArticulos.setSelectedIndex(0);
                jTabbedPaneArticulos.setEnabledAt(0, true);
                jTabbedPaneArticulos.setEnabledAt(1, false);
                listar();
            }
        }
    }//GEN-LAST:event_jButtonGuardarActionPerformed

    private void jButtonCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCargarActionPerformed
        int respuesta = JOptionPane.showConfirmDialog(null, "¿Seguro que deseas hacer la carga inicial de los artículos? Esto borrará todos los artículos y los pedidos guardados actualmente.", "Confirmación", JOptionPane.YES_NO_OPTION);
        if (respuesta == JOptionPane.YES_OPTION) {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setDialogTitle("Seleccionar archivo XLSX");
            fileChooser.setFileFilter(new FileNameExtensionFilter("Archivos XLSX", "xlsx"));
            fileChooser.setApproveButtonText("Cargar artículos");
            fileChooser.setApproveButtonToolTipText("Selecciona el archivo XLSX desde el que se cargarán todos los artículos al sistema.");
            int resultado = fileChooser.showOpenDialog(null);
            if (resultado != JFileChooser.APPROVE_OPTION) {
                return;
            }
            File archivoSeleccionado = fileChooser.getSelectedFile();
            String archivoExcel = archivoSeleccionado.getAbsolutePath();
            FileInputStream archivo;
            try {
                archivo = new FileInputStream(new File(archivoExcel));
                Workbook libroExcel;
                libroExcel = new XSSFWorkbook(archivo);
                Sheet hojaExcel = libroExcel.getSheetAt(0);
                String insert = AC.cargarArticulos(hojaExcel);
                if (insert.equals("OK")) {
                    JOptionPane.showMessageDialog(null, "Artículos insertados con éxito.", "Artículos", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, insert, "Artículos", JOptionPane.ERROR_MESSAGE);
                }
                listar();
                archivo.close();
                libroExcel.close();
            } catch (IOException io) {
                Logger.getLogger(VistaArticulo.class.getName()).log(Level.SEVERE, null, io);
            }
        } else {
            JOptionPane.showMessageDialog(null, "No se realizará la carga inicial de artículos.", "Artículos", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButtonCargarActionPerformed

    private void jButtonActualizacionGeneralActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonActualizacionGeneralActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Seleccionar archivo XLSX");
        fileChooser.setFileFilter(new FileNameExtensionFilter("Archivos XLSX", "xlsx"));
        fileChooser.setApproveButtonText("Actualizar precios");
        fileChooser.setApproveButtonToolTipText("Selecciona el archivo XLSX desde el que se actualizarán todos los precios de los artículos.");
        int resultado = fileChooser.showOpenDialog(null);
        if (resultado != JFileChooser.APPROVE_OPTION) {
            return;
        }
        File archivoSeleccionado = fileChooser.getSelectedFile();
        String archivoExcel = archivoSeleccionado.getAbsolutePath();
        FileInputStream archivo;
        try {
            archivo = new FileInputStream(new File(archivoExcel));
            Workbook libroExcel;
            libroExcel = new XSSFWorkbook(archivo);
            Sheet hojaExcel = libroExcel.getSheetAt(0);
            String update = AC.actualizarPrecios(hojaExcel);
            if (update.equals("OK")) {
                JOptionPane.showMessageDialog(null, "Actualización realizada con éxito.", "Artículos", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, update, "Artículos", JOptionPane.ERROR_MESSAGE);
            }
            listar();
            archivo.close();
            libroExcel.close();
        } catch (IOException io) {
            Logger.getLogger(VistaArticulo.class.getName()).log(Level.SEVERE, null, io);
        }
    }//GEN-LAST:event_jButtonActualizacionGeneralActionPerformed

    private void jButtonAplicarCambioPreciosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAplicarCambioPreciosActionPerformed
        if (jTextFieldPorcentaje.getText().equals("") || !jTextFieldPorcentaje.getText().matches("^[0-9]+([.][0-9]{1,2})?$")) {
            JOptionPane.showMessageDialog(null, "Debes introducir un porcentaje válido para actualizar los artículos del proveedor seleccionado.", "Artículos", JOptionPane.WARNING_MESSAGE);
        } else {
            String proveedor = String.valueOf(jComboBoxProveedor.getItemAt(jComboBoxProveedor.getSelectedIndex()));
            Double porcentaje = Double.valueOf(jTextFieldPorcentaje.getText());
            int respuesta = JOptionPane.showConfirmDialog(null, "¿Seguro que deseas aplicar una subida de precios de un " + porcentaje + "% al proveedor " + proveedor + "?", "Confirmación", JOptionPane.YES_NO_OPTION);
            if (respuesta == JOptionPane.YES_OPTION) {
                String update = AC.cambioPreciosProveedor(proveedor, porcentaje);
                if (update.equals("OK")) {
                    JOptionPane.showMessageDialog(null, "Actualización de un " + porcentaje + "% realizada con éxito al proveedor " + proveedor + ".", "Artículos", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, update, "Artículos", JOptionPane.ERROR_MESSAGE);
                }
                listar();
            } else {
                JOptionPane.showMessageDialog(null, "No se aplicará el cambio de precios", "Artículos", JOptionPane.INFORMATION_MESSAGE);
            }
            jTextFieldPorcentaje.setText("");
        }
    }//GEN-LAST:event_jButtonAplicarCambioPreciosActionPerformed

    private void jButtonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEliminarActionPerformed
        if (jTableArticulos.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(null, "Seleccione el artículo a eliminar.", "Artículos", JOptionPane.INFORMATION_MESSAGE);
        } else {
            int filaSeleccionada = jTableArticulos.getSelectedRow();
            Object ref = jTableArticulos.getValueAt(filaSeleccionada, 0);
            String refer = String.valueOf(ref);
            Object des = jTableArticulos.getValueAt(filaSeleccionada, 2);
            String descr = String.valueOf(des);
            int respuesta = JOptionPane.showConfirmDialog(null, "¿Seguro que deseas eliminar el artículo " + descr + "?", "Confirmación", JOptionPane.YES_NO_OPTION);
            if (respuesta == JOptionPane.YES_OPTION) {
                String delete = AC.eliminar(refer);
                if (delete.equals("OK")) {
                    JOptionPane.showMessageDialog(null, "Eliminación del artículo " + descr + " realizada con éxito.", "Artículos", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, delete, "Artículos", JOptionPane.ERROR_MESSAGE);
                }
                listar();
            } else if (respuesta == JOptionPane.NO_OPTION) {
                JOptionPane.showMessageDialog(null, "No se eliminará el artículo " + descr + ".", "Artículos", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButtonEliminarActionPerformed

    private void jButtonActualizacionIbiliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonActualizacionIbiliActionPerformed
        JOptionPane.showMessageDialog(null, "Actualmente no se dispone de ningún archivo XLSX del proveedor seleccionado.", "Artículos", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jButtonActualizacionIbiliActionPerformed

    private void jButtonActualizacionLifestyleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonActualizacionLifestyleActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Seleccionar archivo XLSX");
        fileChooser.setFileFilter(new FileNameExtensionFilter("Archivos XLSX", "xlsx"));
        fileChooser.setApproveButtonText("Actualizar LifeStyle");
        fileChooser.setApproveButtonToolTipText("Selecciona el archivo XLSX desde el que se actualizarán todos los precios de los artículos de LifeStyle.");
        int resultado = fileChooser.showOpenDialog(null);
        if (resultado != JFileChooser.APPROVE_OPTION) {
            return;
        }
        File archivoSeleccionado = fileChooser.getSelectedFile();
        String archivoExcel = archivoSeleccionado.getAbsolutePath();
        FileInputStream archivo;
        try {
            archivo = new FileInputStream(new File(archivoExcel));
            Workbook libroExcel;
            libroExcel = new XSSFWorkbook(archivo);
            Sheet hojaExcel = libroExcel.getSheetAt(0);
            String update = AC.actualizarPreciosLifeStyle(hojaExcel);
            if (update.equals("OK")) {
                JOptionPane.showMessageDialog(null, "Actualización realizada con éxito.", "Artículos", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, update, "Artículos", JOptionPane.ERROR_MESSAGE);
            }
            listar();
            archivo.close();
            libroExcel.close();
        } catch (IOException io) {
            Logger.getLogger(VistaArticulo.class.getName()).log(Level.SEVERE, null, io);
        }
    }//GEN-LAST:event_jButtonActualizacionLifestyleActionPerformed

    private void jButtonActualizacionMetaltexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonActualizacionMetaltexActionPerformed
        JOptionPane.showMessageDialog(null, "Actualmente no se dispone de ningún archivo XLSX del proveedor seleccionado.", "Artículos", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jButtonActualizacionMetaltexActionPerformed

    private void jButtonRevertirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRevertirActionPerformed
        String pro = jComboBoxProveedor.getSelectedItem().toString();
        int respuesta = JOptionPane.showConfirmDialog(null, "¿Seguro que deseas revertir los cambios de precio al proveedor " + pro + "?", "Confirmación", JOptionPane.YES_NO_OPTION);
        if (respuesta == JOptionPane.YES_OPTION) {
            String revertir = AC.revertirPreciosProveedor(pro);
            if (revertir.equals("OK")) {
                JOptionPane.showMessageDialog(null, "Se han recuperado con éxito los precios anteriores del proveedor seleccionado.", "Artículos", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, revertir, "Artículos", JOptionPane.ERROR_MESSAGE);
            }
            listar();
        } else if (respuesta == JOptionPane.NO_OPTION) {
            JOptionPane.showMessageDialog(null, "No se recuperarán los precios anteriores.", "Artículos", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButtonRevertirActionPerformed

    private void jButtonRecuperarPrecioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRecuperarPrecioActionPerformed
        String ref = jTextFieldReferenciaMantenimiento.getText();
        int respuesta = JOptionPane.showConfirmDialog(null, "¿Seguro que deseas recuperar el precio anterior?", "Confirmación", JOptionPane.YES_NO_OPTION);
        if (respuesta == JOptionPane.YES_OPTION) {
            String revertir = AC.revertirPrecioArticulo(ref);
            if (revertir.equals("OK")) {
                JOptionPane.showMessageDialog(null, "Se ha recuperado con éxito el precio anterior.", "Artículos", JOptionPane.INFORMATION_MESSAGE);
                jButtonGuardar.setEnabled(false);
            } else {
                JOptionPane.showMessageDialog(null, revertir, "Artículos", JOptionPane.ERROR_MESSAGE);
            }
            jTextFieldPrecioMantenimiento.setText(String.valueOf(AC.getPrecio(ref)));
        } else if (respuesta == JOptionPane.NO_OPTION) {
            JOptionPane.showMessageDialog(null, "No se recuperará el precio anterior.", "Artículos", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButtonRecuperarPrecioActionPerformed

    private void jButtonCalcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCalcularActionPerformed
        if (jTextFieldPrecio.getText().equals("") || !jTextFieldPrecio.getText().matches("^[0-9]+([.][0-9]{1,2})?$")) {
            JOptionPane.showMessageDialog(null, "Debes introducir un precio válido para calcular el porcentaje del cambio de precio.", "Artículos", JOptionPane.WARNING_MESSAGE);
        } else if (jTextFieldAnterior.getText().equals("") || !jTextFieldAnterior.getText().matches("^[0-9]+([.][0-9]{1,2})?$")) {
            JOptionPane.showMessageDialog(null, "Debes introducir un precio anterior válido para calcular el porcentaje del cambio de precio.", "Artículos", JOptionPane.WARNING_MESSAGE);
        } else {
            String prec = jTextFieldPrecio.getText();
            String precioAnt = jTextFieldAnterior.getText();
            double porcentaje = Double.valueOf(DF.format(AC.calcularPorcentaje(Double.valueOf(prec), Double.valueOf(precioAnt))));
            jTextFieldPrecio.setText("");
            jTextFieldAnterior.setText("");
            jTextFieldPorcentaje.setText(String.valueOf(porcentaje));
        }
    }//GEN-LAST:event_jButtonCalcularActionPerformed

    private void mostrarPaginas() {
        int regPag = Integer.valueOf(jComboBoxRegistrosPagina.getItemAt(jComboBoxRegistrosPagina.getSelectedIndex()));
        int total = AC.total();
        int contador = 0;
        int result = 0;
        do {
            if (contador == 0) {
                result = total - regPag;
                jComboBoxPagina.addItem(String.valueOf(contador + 1));
                contador++;
            } else {
                result = result - regPag;
                jComboBoxPagina.addItem(String.valueOf(contador + 1));
                contador++;
            }
        } while (result > 0);
    }

    public void vaciarCampos() {
        jTextFieldReferenciaMantenimiento.setText("");
        jTextFieldCodigoMantenimiento.setText("");
        jTextAreaDescripcionMantenimiento.setText("");
        jTextFieldMinimoMantenimiento.setText("");
        jTextFieldPrecioMantenimiento.setText("");
        jComboBoxProveedorMantenimiento.setModel(PROC.seleccionar());
    }

    private void asignarValores() {
        this.referencia = jTextFieldReferenciaMantenimiento.getText();
        this.codigoEAN = new BigInteger(jTextFieldCodigoMantenimiento.getText());
        this.descripcion = jTextAreaDescripcionMantenimiento.getText();
        this.minimo = Integer.valueOf(jTextFieldMinimoMantenimiento.getText());
        this.precio = Double.valueOf(jTextFieldPrecioMantenimiento.getText());
        this.proveedor = jComboBoxProveedorMantenimiento.getSelectedItem().toString();
    }

    private void listar() {
        int total = AC.total();
        jTableArticulos.setModel(AC.listar("", 250, 1));
        jTableArticulos.setDefaultEditor(Object.class, new DefaultCellEditor(new JTextField()) {
            @Override
            public boolean isCellEditable(EventObject e) {
                return false;
            }
        });
        TableRowSorter orden = new TableRowSorter(jTableArticulos.getModel());
        jTableArticulos.setRowSorter(orden);
        jComboBoxPagina.setSelectedIndex(0);
        jComboBoxRegistrosPagina.setSelectedIndex(4);
        int mostrados = AC.totalMostrados();
        jLabelCantidad.setText("Mostrando " + mostrados + " de un total de " + total + " artículos");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonActualizacionGeneral;
    private javax.swing.JButton jButtonActualizacionIbili;
    private javax.swing.JButton jButtonActualizacionLifestyle;
    private javax.swing.JButton jButtonActualizacionMetaltex;
    private javax.swing.JButton jButtonAplicarCambioPrecios;
    private javax.swing.JButton jButtonBuscar;
    private javax.swing.JButton jButtonCalcular;
    private javax.swing.JButton jButtonCargar;
    private javax.swing.JButton jButtonEditar;
    private javax.swing.JButton jButtonEliminar;
    private javax.swing.JButton jButtonGuardar;
    private javax.swing.JButton jButtonNuevo;
    private javax.swing.JButton jButtonRecuperarPrecio;
    private javax.swing.JButton jButtonRevertir;
    private javax.swing.JButton jButtonVolver;
    private javax.swing.JComboBox<String> jComboBoxPagina;
    private javax.swing.JComboBox<String> jComboBoxProveedor;
    private javax.swing.JComboBox<String> jComboBoxProveedorMantenimiento;
    private javax.swing.JComboBox<String> jComboBoxRegistrosPagina;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabelActualizacionGeneral;
    private javax.swing.JLabel jLabelActualizacionPro;
    private javax.swing.JLabel jLabelAnterior;
    private javax.swing.JLabel jLabelCambioPrecio;
    private javax.swing.JLabel jLabelCantidad;
    private javax.swing.JLabel jLabelCarga;
    private javax.swing.JLabel jLabelCodigo;
    private javax.swing.JLabel jLabelDescripcion;
    private javax.swing.JLabel jLabelMinimo;
    private javax.swing.JLabel jLabelNumPag;
    private javax.swing.JLabel jLabelPorcentaje;
    private javax.swing.JLabel jLabelPrecio;
    private javax.swing.JLabel jLabelPrecioMantenimiento;
    private javax.swing.JLabel jLabelProveedor;
    private javax.swing.JLabel jLabelReferencia;
    private javax.swing.JLabel jLabelSimboloPorcentaje;
    private javax.swing.JLabel jLabelTotalRegXPag;
    private javax.swing.JPanel jPanelListado;
    private javax.swing.JPanel jPanelMantenimiento;
    private javax.swing.JScrollPane jScrollPaneArticulos;
    private javax.swing.JScrollPane jScrollPaneDescripcion;
    private javax.swing.JTabbedPane jTabbedPaneArticulos;
    private javax.swing.JTable jTableArticulos;
    private javax.swing.JTextArea jTextAreaDescripcionMantenimiento;
    private javax.swing.JTextField jTextFieldAnterior;
    private javax.swing.JTextField jTextFieldCodigoMantenimiento;
    private javax.swing.JTextField jTextFieldDescripcionBuscar;
    private javax.swing.JTextField jTextFieldMinimoMantenimiento;
    private javax.swing.JTextField jTextFieldPorcentaje;
    private javax.swing.JTextField jTextFieldPrecio;
    private javax.swing.JTextField jTextFieldPrecioMantenimiento;
    private javax.swing.JTextField jTextFieldReferenciaMantenimiento;
    // End of variables declaration//GEN-END:variables
}
